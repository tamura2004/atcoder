{
  "get array of integer from stdin": {
    "prefix": "in",
    "body": [
      "gets.to_s.split.map(&.to_i64)"
    ]
  },
  "get integer from stdin": {
    "prefix": "ini",
    "body": [
      "gets.to_s.to_i64"
    ]
  },
  "get string from stdin": {
    "prefix": "ins",
    "body": [
      "gets.to_s"
    ]
  },
  "make 1D array": {
    "prefix": "vi",
    "body": [
      "Array.new($1){ $0 }"
    ]
  },
  "make 2D array": {
    "prefix": "vvi",
    "body": [
      "Array.new($1){ Array.new($2) { $0 } }"
    ]
  },
  "make 3D array": {
    "prefix": "vvvi",
    "body": [
      "Array.new($1){ Array.new($2) { Array.new($3) { $0 } } }"
    ]
  },
  "Int64 zero": {
    "prefix": "zero",
    "body": [
      "0_i64"
    ]
  },
  "Int64 one": {
    "prefix": "one",
    "body": [
      "0_i64"
    ]
  },
  "type Int64": {
    "prefix": "gl",
    "body" : [
      "getter $0 : Int64"
    ]
  },
  "type Int32": {
    "prefix": "gi",
    "body" : [
      "getter $0 : Int32"
    ]
  },
  "getter Int64Array": {
    "prefix": "gvl",
    "body" : [
      "getter $0 : Array(Int64)"
    ]
  },
  "type Int64Array": {
    "prefix": "tvl",
    "body" : [
      "Array(Int64)"
    ]
  },
  "type Int32Array": {
    "prefix": "gvi",
    "body" : [
      "getter $0 : Array(Int32)"
    ]
  },
  "type Int32ArrayArray": {
    "prefix": "gvvi",
    "body" : [
      "getter $0 : Array(Array(Int32))"
    ]
  },
  "type String": {
    "prefix": "gs",
    "body" : [
      "getter $0 : String"
    ]
  },
  "Yes No answer" : {
    "prefix": "yes",
    "body": [
      " ? \"Yes\" : \"No\""
    ]
  },
  "YES NO answer" : {
    "prefix": "yes",
    "body": [
      " ? \"YES\" : \"NO\""
    ]
  },
  "chmax" : {
    "prefix": "chmax",
    "body": [
      "macro chmax(target, other)",
      "  {{target}} = ({{other}}) if ({{target}}) < ({{other}})",
      "end"
    ]
  },
  "chmin" : {
    "prefix": "chmin",
    "body": [
      "macro chmin(target, other)",
      "  {{target}} = ({{other}}) if ({{target}}) > ({{other}})",
      "end"
    ]
  },
  "Class template": {
    "prefix": "class",
    "body": [
      "{% if env(\"DEBUG\") %}",
      "  require \"debug\"",
      "  require \"../lib/crystal/test_helper\"",
      "  include Random::Secure",
      "{% else %}",
      "  macro debug!(content)",
      "  end",
      "{% end %}",
      "",
      "class Problem",
      "  getter n : Int32",
      "  getter a : Array(Int64)",
      "",
      "  def initialize(@n, @a)",
      "  end",
      "",
      "  def self.read",
      "    n = gets.to_s.to_i",
      "    a = gets.to_s.split.map { |v| v.to_i64 }",
      "    new(n, a)",
      "  end",
      "",
      "  def solve",
      "    42",
      "  end",
      "",
      "  def solve2",
      "    a.sum",
      "  end",
      "",
      "  def run",
      "    puts solve",
      "  end",
      "end",
      "",
      "Problem.read.run",
      "",
      "10.times do",
      "  n = rand(10)",
      "  m = 1000_i64",
      "  a = Array.new(n) { rand(m) + 1 }",
      "  obj = Problem.new(n, a)",
      "  assert obj.solve, obj.solve2 do",
      "    {n, a}",
      "  end",
      "end",
      "",
      "testcase = [",
      "  {4, [2, 3, 4, 5], 14},",
      "  {5, [1, 2, 3, 4, 5], 15},",
      "]",
      "",
      "testcase.each do |(n, a, want)|",
      "  obj = Problem.new(n, a.map &.to_i64)",
      "  assert obj.solve, obj.solve2 do",
      "    {n, a}",
      "  end",
      "end",

    ]
  }
}