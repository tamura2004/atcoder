{
  "require crystal lib": {
    "prefix": "require",
    "body": [
      "require \"crystal/$0\""
    ]
  },
  "get array of integer from stdin": {
    "prefix": "in",
    "body": [
      "gets.to_s.split.map(&.to_i64)"
    ]
  },
  "get integer from stdin": {
    "prefix": "ini",
    "body": [
      "gets.to_s.to_i64"
    ]
  },
  "get string from stdin": {
    "prefix": "ins",
    "body": [
      "gets.to_s"
    ]
  },
  "make 1D array": {
    "prefix": "vi",
    "body": [
      "Array.new($1){ $0 }"
    ]
  },
  "make 2D array": {
    "prefix": "vvi",
    "body": [
      "Array.new($1){ Array.new($2) { $0 } }"
    ]
  },
  "make 3D array": {
    "prefix": "vvvi",
    "body": [
      "Array.new($1){ Array.new($2) { Array.new($3) { $0 } } }"
    ]
  },
  "make 4D array": {
    "prefix": "vvvvi",
    "body": [
      "Array.new($1){ Array.new($2) { Array.new($3) { Array.new($4) { $0 } } } }"
    ]
  },
  "make 2D array for dp": {
    "prefix": "dp2",
    "body": [
      "def dp2(i, j, v)",
      "  (1..i).map { (1..j).map { v } }",
      "end"
    ]
  },
  "make 3D array for dp": {
    "prefix": "dp3",
    "body": [
      "def dp3(i, j, k, v)",
      "  (1..i).map { (1..j).map { (1..k).map { v } } }",
      "end"
    ]
  },
  "make 4D array for dp": {
    "prefix": "dp2",
    "body": [
      "def dp4(i, j, k, l, v)",
      "  (1..i).map { (1..j).map { (1..k).map { (1..l).map { v } } } }",
      "end"
    ]
  },
  "type Int64": {
    "prefix": "gl",
    "body" : [
      "getter $0 : Int64"
    ]
  },
  "type Int32": {
    "prefix": "gi",
    "body" : [
      "getter $0 : Int32"
    ]
  },
  "getter Int64Array": {
    "prefix": "gvl",
    "body" : [
      "getter $0 : Array(Int64)"
    ]
  },
  "getter Int32Array": {
    "prefix": "gvi",
    "body" : [
      "getter $0 : Array(Int32)"
    ]
  },
  "getter Int64Array2D": {
    "prefix": "gvvl",
    "body" : [
      "getter $0 : Array(Array(Int64))"
    ]
  },
  "getter Int32Array2D": {
    "prefix": "gvvi",
    "body" : [
      "getter $0 : Array(Array(Int32))"
    ]
  },
  "type Int64Array": {
    "prefix": "tvl",
    "body" : [
      "Array(Int64)"
    ]
  },
  "type Int32Array": {
    "prefix": "tvi",
    "body" : [
      "Array(Int32)"
    ]
  },
  "type Array2D": {
    "prefix": "tvv",
    "body" : [
      "Array(Array($0))"
    ]
  },
  "type Int64Array2D": {
    "prefix": "tvvl",
    "body" : [
      "Array(Array(Int64))"
    ]
  },
  "type Int32Array2D": {
    "prefix": "tvvi",
    "body" : [
      "Array(Array(Int32))"
    ]
  },
  "type String": {
    "prefix": "ts",
    "body" : [
      "String"
    ]
  },
  "type long Pair": {
    "prefix": "tll",
    "body" : [
      "Tuple(Int64,Int64)",
    ]
  },
  "type int Pair": {
    "prefix": "tii",
    "body" : [
      "Tuple(Int32,Int32)",
    ]
  },
  "type long tri": {
    "prefix": "tlll",
    "body" : [
      "Tuple(Int64,Int64,Int64)",
    ]
  },
  "type int tri": {
    "prefix": "tiii",
    "body" : [
      "Tuple(Int32,Int32,Int32)",
    ]
  },
  "chmax" : {
    "prefix": "chmax",
    "body": [
      "macro chmax(target, other)",
      "  {{target}} = ({{other}}) if ({{target}}) < ({{other}})",
      "end"
    ]
  },
  "chmin" : {
    "prefix": "chmin",
    "body": [
      "macro chmin(target, other)",
      "  {{target}} = ({{other}}) if ({{target}}) > ({{other}})",
      "end"
    ]
  },
  "crumutive sum" : {
    "prefix": "cs",
    "body": [
      "a.each_with_object([0_i64]) { |v, h| h << h[-1] + v }"
    ]
  },
  "hash init" : {
    "prefix": "counter",
    "body": [
      "Hash(Int64,Int64).new { |h,k| h[k] = nil }"
    ]
  },
  "Class template": {
    "prefix": "class",
    "body": [
      "require \"crystal/problem\"",
      "",
      "class Main < Problem",
      "  getter n : Int32",
      "  getter a : Array(Int64)",
      "",
      "  def initialize(@n, @a)",
      "  end",
      "",
      "  def self.read(io : IO)",
      "    n = io.gets.to_s.to_i",
      "    a = io.gets.to_s.split.map(&.to_i64)",
      "    new(n, a)",
      "  end",
      "",
      "  def solve",
      "  end",
      "",
      "  def run",
      "    pp! self",
      "    puts solve",
      "  end",
      "end",
      "",
      "Main.read.run",
    ]
  }
}